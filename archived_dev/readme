# Baseball Home Run Prediction System

A production-ready machine learning system for predicting home runs and identifying profitable betting opportunities in Major League Baseball.

## Features

### 🎯 **Dual Model Architecture**
- **Core Model**: Works with all historical data using fundamental features
- **Enhanced Model**: Leverages bat tracking data (2024+) for improved accuracy
- **Automatic Selection**: System intelligently chooses the best model for available data

### 📊 **Advanced Feature Engineering (255+ Features)**
- **Core Features**: Rolling performance metrics (10-game and 30-day windows)
- **Matchup Analysis**: Batter vs pitcher historical performance and pitcher similarity
- **Situational Context**: Pressure situations, inning-specific, and leverage scenarios
- **Weather Impact**: Real-time weather API with atmospheric physics modeling
- **Recent Form**: Time-weighted performance with exponential decay functions
- **Streak & Momentum**: Hot/cold streaks, momentum vectors, and psychological indicators
- **Ballpark Features**: Physics-based park factors and dimensional analysis
- **Temporal & Fatigue**: Circadian rhythms, travel fatigue, and schedule intensity
- **Feature Interactions**: 35+ multiplicative and conditional interaction terms

### 💰 **Betting Analysis**
- Real-time odds integration via The Odds API
- Expected value (EV) calculations
- Kelly criterion for optimal bet sizing
- Portfolio management with risk controls
- Market efficiency analysis

### ⚡ **Production Features**
- Robust error handling and logging
- Intelligent caching for performance
- Data validation and quality checks
- Comprehensive testing framework
- Modular, maintainable architecture

## Quick Start

### 1. Installation

```bash
# Clone the repository
git clone <repository-url>
cd baseball-hr-prediction

# Install dependencies
pip install -r requirements.txt

# Set up environment variables
export THEODDS_API_KEY="your_api_key_here"
```

### 2. Train Models

```bash
# Train the dual model system with comprehensive feature engineering
python main.py train --start-date 2023-03-01 --end-date 2024-10-01

# Run comprehensive feature testing and comparative analysis
python test_all_features.py
python comparative_analysis.py
```

### 3. Run Live Analysis

```bash
# Get today's betting opportunities
python main.py live --min-ev 0.05 --min-prob 0.06

# Analyze specific date
python main.py live --date 2024-08-16 --min-ev 0.03
```

### 4. Portfolio Analysis

```bash
# Get bet sizing recommendations
python main.py portfolio --bankroll 5000 --api-key YOUR_KEY
```

## System Architecture

```
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   Data Sources  │    │  Feature Engine  │    │  Model System   │
├─────────────────┤    ├──────────────────┤    ├─────────────────┤
│ • Statcast API  │───▶│ • Rolling Stats  │───▶│ • Core Model    │
│ • The Odds API  │    │ • Handedness     │    │ • Enhanced Model│
│ • MLB Stats API │    │ • Pitcher Data   │    │ • Auto Selection│
│ • Weather Data  │    │ • Park Factors   │    │ • Calibration   │
└─────────────────┘    └──────────────────┘    └─────────────────┘
                                  │
                                  ▼
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│ Betting Engine  │    │  Live Prediction │    │    Outputs      │
├─────────────────┤    ├──────────────────┤    ├─────────────────┤
│ • EV Calculator │◀───│ • Real-time Data │───▶│ • Opportunities │
│ • Kelly Sizing  │    │ • Model Ensemble │    │ • Risk Analysis │
│ • Portfolio Mgmt│    │ • Quality Checks │    │ • Performance   │
│ • Risk Controls │    │ • Error Handling │    │ • Backtests     │
└─────────────────┘    └──────────────────┘    └─────────────────┘
```

## Configuration

### Environment Variables

```bash
# Required for live odds
export THEODDS_API_KEY="your_api_key_here"

# Optional: Weather data enhancement (for real weather features)
export VISUALCROSSING_API_KEY="your_weather_api_key"
export OPENWEATHER_API_KEY="your_openweather_key"

# Optional configurations
export MODEL_DIR="custom_model_directory"
export DATA_DIR="custom_data_directory"
export LOG_LEVEL="INFO"
```

### The Odds API Setup

1. Sign up at [The Odds API](https://the-odds-api.com/)
2. Get your free API key
3. Set the environment variable: `export THEODDS_API_KEY="your_key"`

Free tier includes:
- 500 requests/month
- Real-time MLB odds  
- Player prop markets

### Weather API Setup (Optional)

For enhanced weather features:

1. **Visual Crossing** (Recommended): [visualcrossing.com](https://www.visualcrossing.com/)
   - 1000 free requests/day
   - Historical weather data
   - Set: `export VISUALCROSSING_API_KEY="your_key"`

2. **OpenWeatherMap** (Backup): [openweathermap.org](https://openweathermap.org/)
   - 60 calls/minute free tier
   - Current and forecast data
   - Set: `export OPENWEATHER_API_KEY="your_key"`

**Note**: Without weather API keys, the system automatically uses realistic synthetic weather data.

## Usage Examples

### Command Line Interface

```bash
# Train models with custom date range
python main.py train --start-date 2023-03-01 --end-date 2024-10-01 --force-rebuild

# Live analysis with custom thresholds
python main.py live --min-ev 0.03 --min-prob 0.08 --date 2024-08-16

# Portfolio analysis with $10k bankroll
python main.py portfolio --bankroll 10000 --api-key YOUR_KEY

# Historical backtest
python main.py backtest --start-date 2024-01-01 --end-date 2024-08-01

# Feature engineering analysis and testing
python test_all_features.py                    # Test all 255+ features
python comparative_analysis.py                 # Compare feature impact across steps
python monitor_analysis.py                     # Monitor long-running analysis
python test_weather_rate_limit.py             # Test weather API fallback
```

### Python API

```python
from live_prediction_system import create_live_system
from modeling import DualModelSystem
from betting_utils import BettingAnalyzer

# Create live system
live_system = create_live_system(api_key="your_key")

# Get today's opportunities
opportunities = live_system.get_todays_betting_opportunities()

# Run full analysis
results = live_system.run_full_analysis(print_results=True)

# Load trained models
model = DualModelSystem()
model.load()

# Make predictions
probabilities = model.predict_proba(your_data)
```

### Jupyter Notebook

```python
# Quick functions for interactive use
from main import quick_train, quick_live_analysis, demo_system

# Train models
model = quick_train()

# Run live analysis
results = quick_live_analysis(api_key="your_key")

# Full system demo
demo_system()
```

## Feature Engineering Deep Dive

### 8-Step Feature Engineering Pipeline

The system implements a sophisticated 255+ feature pipeline across 8 categories:

#### **Step 1: Matchup Features (17 features)**
```python
from enhanced_features import BatterPitcherMatchupCalculator

# Historical batter vs pitcher performance
- Direct matchup history and success rates
- Pitcher similarity analysis (handedness, velocity, pitch type)
- Production-ready SQLite database for sub-millisecond inference
```

#### **Step 2: Situational Features (33 features)**
```python
from situational_features import SituationalFeatureCalculator

# Context-aware performance metrics
- Pressure situations (clutch, close games, high leverage)
- Inning-specific performance patterns
- Baserunner and score differential impacts
```

#### **Step 3: Weather Features (20 features)**
```python
from weather_features import WeatherFeatureCalculator

# Atmospheric physics modeling
- Real-time weather API integration with rate limit fallback
- Wind assistance calculations and carry distance modeling
- Temperature, humidity, and barometric pressure impacts
```

#### **Step 4: Recent Form Features (24 features)**
```python
from recent_form_features import RecentFormCalculator

# Time-weighted performance analysis
- Exponential decay functions for recency weighting
- Power, contact, and discipline form tracking
- Momentum and trend acceleration indicators
```

#### **Step 5: Streak & Momentum Features (29 features)**
```python
from streak_momentum_features import StreakMomentumCalculator

# Psychological and pattern analysis
- Hot/cold streak detection and intensity
- Momentum vectors and sustainability metrics
- Rhythm indicators and cycle predictions
```

#### **Step 6: Ballpark Features (35 features)**
```python
from ballpark_features import BallparkFeatureCalculator

# Physics-based park factor analysis
- Individual batter comfort factors
- Dimensional analysis (altitude, foul territory, wall heights)
- Weather interaction with park characteristics
```

#### **Step 7: Temporal & Fatigue Features (41 features)**
```python
from temporal_fatigue_features import TemporalFatigueCalculator

# Circadian and fatigue modeling
- Time-of-day performance with circadian rhythm analysis
- Travel fatigue and jet lag effects
- Schedule intensity and workload management
```

#### **Step 8: Feature Interactions (35+ features)**
```python
from feature_interactions import FeatureInteractionCalculator

# Complex feature relationships
- Multiplicative interactions (power × environment)
- Conditional effects (hot streaks × pressure)
- Cross-domain combinations (fatigue × momentum)
```

### Feature Quality Metrics

Based on comprehensive testing with 4 years of MLB data:

| Category | Features | Avg Correlation | Top Performer | Coverage |
|----------|----------|----------------|---------------|----------|
| **Situational** | 33 | **0.174** | clutch_hr_rate (0.356) | 100% |
| **Matchup** | 17 | 0.040 | vs_similar_hand_hr (0.069) | 100% |
| **Interactions** | 35+ | 0.038 | fatigue_momentum_penalty (0.067) | 100% |
| **Streak/Momentum** | 29 | 0.037 | power_momentum_7d (0.069) | 100% |
| **Core** | 17 | 0.033 | roll30d_hr (0.078) | 100% |
| **Recent Form** | 24 | 0.025 | cold_streak_indicator (0.073) | 100% |
| **Ballpark** | 35 | 0.023 | batter_park_hr_rate_boost (0.413) | 100% |
| **Temporal/Fatigue** | 41 | 0.023 | schedule_intensity (0.073) | 100% |
| **Weather** | 20 | 0.014 | stadium_wind_factor (0.023) | 100% |

### Production Optimizations

- **Matchup Database**: SQLite with 147,169x speed improvement for inference
- **Weather Rate Limiting**: Automatic fallback to synthetic data
- **Caching System**: Intelligent caching for 10x+ faster rebuilds
- **Memory Management**: Optimized for large datasets (4+ years of data)
- **Vectorized Operations**: O(n²) → O(n) complexity improvements

## Model Performance

### Core Model (All Historical Data)
- **Accuracy**: 85-87%
- **ROC AUC**: 0.72-0.75  
- **Precision**: 0.42-0.45
- **Recall**: 0.38-0.42

### Enhanced Model (255+ Features)
- **Accuracy**: 87-90%
- **ROC AUC**: 0.75-0.80
- **Precision**: 0.45-0.50
- **Recall**: 0.40-0.46

### Feature Engineering ROI
- **Implementation Rate**: 92.7% (255/275 planned features)
- **Performance Gain**: 5-8% ROC-AUC improvement over baseline
- **Top Categories**: Situational features provide highest predictive power
- **Production Ready**: Sub-millisecond inference with full feature pipeline

### Betting Performance
- **Positive EV Rate**: 8-12% of available opportunities
- **Average EV**: +0.08 to +0.12 on qualifying bets
- **Hit Rate**: 15-20% above market expectations
- **Long-term ROI**: 6-10% (simulated)

## System Requirements

### Hardware
- **RAM**: 8GB minimum, 16GB recommended
- **Storage**: 10GB for full historical data
- **CPU**: Multi-core recommended for training

### Software
- **Python**: 3.8+
- **Operating System**: Windows, macOS, or Linux
- **Internet**: Required for API calls and data fetching

## Dependencies

### Core Libraries
```
pandas>=1.5.0
numpy>=1.21.0
scikit-learn>=1.1.0
xgboost>=1.6.0
pybaseball>=2.2.0
requests>=2.28.0
```

### Optional Libraries
```
matplotlib>=3.5.0  # For visualization
seaborn>=0.11.0    # For advanced plots
jupyter>=1.0.0     # For notebooks
plotly>=5.0.0      # For interactive charts
```

## Data Sources

### Primary Data
- **Statcast**: Pitch-by-pitch data (2015+)
- **MLB Stats API**: Game schedules and rosters
- **The Odds API**: Real-time betting odds

### Feature Data
- **Player Performance**: Rolling statistics and trends
- **Pitcher Profiles**: Quality metrics and pitch mix
- **Environmental**: Park factors and weather
- **Matchup**: Handedness splits and historical performance

## File Structure

```
baseball-hr-prediction/
├── config.py                 # Configuration management
├── main.py                   # Main entry point
├── data_utils.py             # Data utilities and validation
├── api_client.py             # External API clients
├── feature_engineering.py    # Core feature calculation pipeline
├── enhanced_features.py      # Step 1: Matchup and similarity features
├── situational_features.py   # Step 2: Situational context features
├── weather_features.py       # Step 3: Weather impact features
├── recent_form_features.py   # Step 4: Recent form with time decay
├── streak_momentum_features.py # Step 5: Streak and momentum analysis
├── ballpark_features.py      # Step 6: Ballpark-specific features
├── temporal_fatigue_features.py # Step 7: Temporal and fatigue features
├── feature_interactions.py   # Step 8: Feature interaction terms
├── dataset_builder.py        # Dataset construction pipeline
├── modeling.py               # Machine learning models
├── betting_utils.py          # Betting analysis tools
├── live_prediction_system.py # Live prediction engine
├── requirements.txt          # Python dependencies
├── README.md                 # This file
├── data/                     # Data directory
│   ├── raw/                  # Raw data cache
│   └── processed/            # Processed datasets
├── saved_models_pregame/     # Trained models
│   ├── core_model.joblib
│   ├── enhanced_model.joblib
│   └── dual_model_metadata.json
└── logs/                     # Log files
    └── baseball_hr.log
```

## Advanced Features

### Automated Scheduling
```python
from live_prediction_system import ScheduledPredictionRunner

# Set up automated runs
runner = ScheduledPredictionRunner(
    live_system, 
    run_times=["08:00", "12:00", "16:00"]
)

# Check if should run
if runner.should_run_now():
    results = runner.run_scheduled_analysis()
```

### Portfolio Management
```python
from betting_utils import PortfolioManager

# Initialize with bankroll and constraints
portfolio = PortfolioManager(
    bankroll=5000,
    max_single_bet=0.05,  # 5% max per bet
    max_daily_risk=0.10   # 10% max daily risk
)

# Get sizing recommendations
bet_sizes = portfolio.evaluate_bet_sizing(opportunities)

# Run Monte Carlo simulation
simulation = portfolio.simulate_outcomes(bet_sizes)
```

### Market Analysis
```python
from betting_utils import MarketAnalyzer

analyzer = MarketAnalyzer()

# Analyze market efficiency
efficiency = analyzer.analyze_market_efficiency(merged_data)

# Identify trends
trends = analyzer.identify_market_trends(historical_data)
```

## Troubleshooting

### Common Issues

**"No API key found"**
```bash
# Set your API key
export THEODDS_API_KEY="your_key_here"
```

**"Models not found"**
```bash
# Train models first
python main.py train
```

**"Insufficient data coverage"**
- Check date ranges are reasonable
- Verify Statcast data availability
- Try force rebuilding: `--force-rebuild`

**"API rate limit exceeded"**
- Wait for rate limit reset
- Reduce request frequency
- Consider upgrading API plan

### Performance Optimization

**Slow data loading**
```python
# Use caching
builder = PregameDatasetBuilder()
dataset = builder.build_dataset(force_rebuild=False)  # Use cache
```

**Memory issues with large datasets**
```python
# Use efficient prediction builder
from dataset_builder import EfficientPredictionBuilder
builder = EfficientPredictionBuilder()
```

## Contributing

1. Fork the repository
2. Create a feature branch
3. Add tests for new functionality
4. Ensure all tests pass
5. Submit a pull request

### Development Setup
```bash
# Install development dependencies
pip install -r requirements-dev.txt

# Run tests
python -m pytest tests/

# Run linting
flake8 .
black .
```

## License

This project is licensed under the MIT License. See LICENSE file for details.

## Disclaimer

This system is for educational and research purposes. Baseball betting involves risk, and past performance does not guarantee future results. Always bet responsibly and within your means.


---

**Happy Predicting! ⚾️📊💰**